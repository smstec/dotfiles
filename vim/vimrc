execute pathogen#infect()

set encoding=utf-8
set ignorecase
set number
set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
let g:flake8_show_quickfix=0 "don't show
let g:autopep8_select="E127,E128,E201,E202,E203,E221,E225,E231,E251,E265,E302,E303,E305,E703,W191,W291,W293,W391"
let g:autopep8_disable_show_diff=1
let g:autopep8_max_line_length=128
let g:NERDDefaultAlign = 'left'
let g:indent_guides_guide_size = 1
let g:indent_guides_color_change_percent = 3
let g:indent_guides_color_change_percent = 3
let g:gitgutter_max_signs = 1000
let g:vimwiki_list = [{'path': '~/vimwiki/'}]
let Tlist_Use_Right_Window = 1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd vimenter * if !argc() | NERDTree | endif
autocmd BufNewFile *.py source ~/.vim/ftplugin/pytemplate.vim
autocmd BufWinLeave * mkview
autocmd BufWinEnter * silent loadview
filetype plugin on
noremap  K k
set nocompatible
" source $VIMRUNTIME/vimrc_example.vim
" source $VIMRUNTIME/mswin.vim
" behave mswin
set autoindent
set noautowrite
set showmatch
set wrapmargin=0
set report=1
set nowrap
set autoread
set preserveindent
set ignorecase
set number
set textwidth=140
set syntax=python printfont=Courier:h7
set ff=unix
syntax enable
syntax on
filetype indent plugin on
set background=dark
"colorscheme solarized
"color dracula

if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "", 0770)
endif
if !isdirectory($HOME."/.vim/backup")
    call mkdir($HOME."/.vim/backup", "", 0770)
endif
if !isdirectory($HOME."/.vim/swp")
    call mkdir($HOME."/.vim/swp", "", 0770)
endif

" Configure UNDO
set undodir=~/.vim/undo
set undofile


set backup
set writebackup
set backupdir=$HOME/.vim/backup
set directory=$HOME/.vim/swp
if !has('nvim')
    set ttymouse=xterm2
endif
set mouse=a
set title
set titleold=""
set titlestring=VIM:\ %F
set ls=2
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"тнд":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ },
      \ 'component_function': {
      \   'filename': 'MyFilename',
      \ }
      \ }
let mapleader=","
map     {!}sort -b
map  h  1G
map  H  1G
map  F  G
map  V  
map  U  
map  T  k
map  S  j
map  Q   i
map  P   x
map  L   O
map  M   dd
map  K   D
map  J   DjdG$
map  g j
map  v i l
map  V R l
map! A  ka
map! D  ha
map! C  la
map! B  ja
map! L  
map! Q  
map! R  

if &term =~ "putty"
    " 256 colors
    let &t_Co = 256
    " restore screen after quitting
    let &t_ti = "\<Esc>7\<Esc>[r\<Esc>[?47h"
    let &t_te = "\<Esc>[?47l\<Esc>8"
    if has("terminfo")
        let &t_Sf = "\<Esc>[3%p1%dm"
        let &t_Sb = "\<Esc>[4%p1%dm"
    else
        let &t_Sf = "\<Esc>[3%dm"
        let &t_Sb = "\<Esc>[4%dm"
    endif
endif
let g:solarized_termcolors=256

noremap <Leader>T :TlistToggle
noremap <Leader>js :%!python -m json.tool
noremap <Leader>w :FixWhitespace
noremap <Leader>n :NERDTree
noremap <Leader>dt :windo diffthis
noremap <Leader>do :windo diffo
noremap <F5> :windo set invscrollbind<cr>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

function! MyFilename()
    return expand('%:p')
endfunction

au FileType qf call AdjustWindowHeight(3, 10)
function! AdjustWindowHeight(minheight, maxheight)
    exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
endfunction
